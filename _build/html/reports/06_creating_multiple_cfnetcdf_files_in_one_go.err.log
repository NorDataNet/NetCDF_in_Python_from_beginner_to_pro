Traceback (most recent call last):
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/lukem/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/lukem/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
files = ['file1.csv','file2.csv','file3.csv']

# Side car file? Information in headers? Perhaps need examples in the data folder.

for file in files:
    # df = pd.read_csv(file)
    
    # Since we don't have the files here, let's create dummy profiles instead.
    pressures = np.random.uniform(0, 100, 10)  # 10 Random pressures between 0 and 100
    temperatures = np.random.uniform(2, 30, 10)  # Random temperatures between 2Â°C and 30Â°C
    salinities = np.random.uniform(30, 40, 10)  # Random salinity between 30 and 40 PSU
    
    # Creating a DataFrame for the depth profile
    df = pd.DataFrame({
        'Pressure': pressures,
        'Temperature': temperatures,
        'Salinity': salinities
    })
    
    # Create an xarray dataset from the dataframe
    xrds = xr.Dataset(
        coords={
            'pressure': df['Pressure']
        },
        data_vars={
            'Temperature': ('pressure', df['Temperature']),
            'Salinity': ('pressure', df['Salinity']),
        } 
    )

    # Add attributes to make it CF-compliant
    xrds['Temperature'].attrs = {
        'standard_name': 'sea_water_temperature',
        'long_name': 'Temperature of sea water',
        'units': 'degrees_Celsius',
        'coverage_content_type': 'physicalMeasurement'
    }
    xrds['Salinity'].attrs = {
        'standard_name': 'sea_water_salinity',
        'long_name': 'Salinity of sea water',
        'units': 'PSU',
        'coverage_content_type': 'physicalMeasurement'
    }
    xrds['pressure'].attrs = {
        'standard_name': 'sea_water_pressure',
        'long_name': 'Sea water pressure',
        'units': 'dbar',
        'coverage_content_type': 'coordinate'
    }
    
    # Get the current timestamp in UTC and format it in ISO8601 - different for each file
    time_now = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')
    
    # Global attributes including variables to vary them for each loop (and each NetCDF file)
    xrds.attrs = {
        'id': your_id,
        'naming_authority': 'institution that provides the id',
        'title': f'Depth Profile Data from {station_name}',
        'summary': f'This dataset contains depth profiles of temperature and salinity measurements from {station_name}.',
        'keywords': 'sea_water_temperature, sea_water_salinity',
        'keywords_vocabulary': 'CF:NetCDF COARDS Climate and Forecast Standard Names',
        'geospatial_lat_min': latitude,
        'geospatial_lat_max': latitude,
        'geospatial_lon_min': longitude,
        'geospatial_lon_max': longitude,
        'time_coverage_start': timestamp_collected_iso8601,
        'time_coverage_end': timestamp_collected_iso8601,
        'Conventions': 'ACDD-1.3, CF-1.11',
        'history': f'{time_now}: Modified by YourName using Python',
        'source': 'Measurement',
        'processing_level': 'Level of processing/quality control',
        'date_created': time_now,
        'creator_type': 'person',
        'creator_institution': 'Your Institution',
        'creator_name': 'Your Name',
        'creator_email': 'your@email.com',
        'creator_url': 'your_url_here', # OrcID is best practice, e.g. https://orcid.org/0000-0002-9746-544X
        'institution': 'Your Institution',
        'publisher_name': 'Publisher Name', # Data centre where your data will be published
        'publisher_email': 'publisher@email.com',
        'publisher_url': 'publisher_url_here',
        'project': 'Your Project Name',
        'instrument': 'CTD',
        'instrument_vocabulary': 'http://vocab.nerc.ac.uk/collection/L22/current/TOOL0001/',
        'license': 'https://creativecommons.org/licenses/by/4.0/',
        'featureType': 'profile',
        'station_name': station_name # Custom attribute, but you can add any attribute you like alongside the minimum requirements.
    }
    
    filename = 
    # xrds.to_netcdf(f'/path/to/your/{filename}.nc')
    
    
------------------

[0;36m  Cell [0;32mIn[6], line 90[0;36m[0m
[0;31m    filename =[0m
[0m               ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (2097758331.py, line 90)

